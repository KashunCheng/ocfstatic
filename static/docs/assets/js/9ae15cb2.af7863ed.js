"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[8392],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>f});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=a.createContext({}),d=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},l=function(e){var n=d(e.components);return a.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=d(t),f=i,g=u["".concat(c,".").concat(f)]||u[f]||p[f]||r;return t?a.createElement(g,o(o({ref:n},l),{},{components:t})):a.createElement(g,o({ref:n},l))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=u;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var d=2;d<r;d++)o[d]=t[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},6570:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>d});var a=t(7462),i=(t(7294),t(3905));const r={title:"Setting up bridging and link aggregation"},o=void 0,s={unversionedId:"staff/procedures/setting-up-lacp",id:"staff/procedures/setting-up-lacp",title:"Setting up bridging and link aggregation",description:"Bridging and LACP will be configured through puppet, but these",source:"@site/docs/staff/procedures/setting-up-lacp.md",sourceDirName:"staff/procedures",slug:"/staff/procedures/setting-up-lacp",permalink:"/docs/staff/procedures/setting-up-lacp",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/staff/procedures/setting-up-lacp.md",tags:[],version:"current",frontMatter:{title:"Setting up bridging and link aggregation"},sidebar:"tutorialSidebar",previous:{title:"Restarting services",permalink:"/docs/staff/procedures/restarting-services"},next:{title:"Setting up mdraid on servers",permalink:"/docs/staff/procedures/setting-up-mdraid"}},c={},d=[{value:"/etc/network/interfaces",id:"etcnetworkinterfaces",level:2},{value:"Bonding",id:"bonding",level:3},{value:"Bridging",id:"bridging",level:3},{value:"Configuring interfaces by hand",id:"configuring-interfaces-by-hand",level:2},{value:"Create a bonding interface",id:"create-a-bonding-interface",level:3},{value:"Bind physical interfaces to the bond interface",id:"bind-physical-interfaces-to-the-bond-interface",level:3},{value:"Show bound interfaces",id:"show-bound-interfaces",level:3}],l={toc:d};function p(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Bridging and LACP will be configured through puppet, but these\nintructions should serve as background and to help debug. A\n",(0,i.kt)("a",{parentName:"p",href:"https://wiki.linuxfoundation.org/networking/bridge"},"bridge")," is basically an in-kernel network switch,\nallowing multiple virtual interfaces to communicate with one another\nat layer 2. LACP, or ",(0,i.kt)("a",{parentName:"p",href:"https://wiki.linuxfoundation.org/networking/bonding"},"interface bonding"),", is a\nprotocol that allows the bandwidth of multiple interfaces to be\naggregated together and treated as a single interface. The type of\nbonding we use, 802.3ad, specifies that the bandwidth of the bonded\ninterface will be the sum of the bandwidth of each child interface,\nwhile providing fault-tolerance in case a particular sub interface\ngoes down."),(0,i.kt)("h2",{id:"etcnetworkinterfaces"},"/etc/network/interfaces"),(0,i.kt)("p",null,"On Debian we can configure the network interfaces to come up at boot by adding\nstanzas to ",(0,i.kt)("inlineCode",{parentName:"p"},"/etc/network/interfaces")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"/etc/network/interfaces.d/<iface>"),"."),(0,i.kt)("h3",{id:"bonding"},"Bonding"),(0,i.kt)("p",null,"We use bond-mode 4, or 802.3ad. Other types are available, like active-fallback or load balancing,\nbut we use 802.3ad. Link aggregation needs to be configured on the switch as well to work. Instructions\nfor doing so can be found in the ",(0,i.kt)("a",{parentName:"p",href:"/docs/staff/backend/switch"},"documentation for the switch"),"."),(0,i.kt)("p",null,"Configuring the bonding interface is relatively simple. One must first install ",(0,i.kt)("inlineCode",{parentName:"p"},"ifenslave"),", and\nidentify the physical interfaces that will be slaved to the bond virtual interface. Then, write\nthe following to the config file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"auto bond0\n\niface bond0 inet manual\n    slaves <iface> <iface> ...\n    bond-mode 802.3ad\n    bond-miimon 100\n    bond-lacp-rate 1\n")),(0,i.kt)("p",null,'What do these options mean? The first line indicates the interfaces that are going to participate\nin the bond. The corresponding ports on the switch are the ones that are going to be aggregated\ninto a channel-group/port-channel. The second line configures the type of aggregation, 802.3ad\nin our case, while the third configures the frequency in miliseconds that the interfaces are\ninspected for link failure and the fourth indicates the rate at which LACP PDUs are sent, 1\nimplying "fast", at a PDU sent every second instead of every 30 seconds ("slow").'),(0,i.kt)("p",null,"If the bond interface is going to be the primary interface on the host, you may want to change\n",(0,i.kt)("inlineCode",{parentName:"p"},"manual")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"static")," and add addressing information by adding ",(0,i.kt)("inlineCode",{parentName:"p"},"address"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"gateway"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"netmask"),"\nfields to the stanza. If the bond interface is going to be part of a bridge, leave it as ",(0,i.kt)("inlineCode",{parentName:"p"},"manual"),"."),(0,i.kt)("h3",{id:"bridging"},"Bridging"),(0,i.kt)("p",null,"Write the following stanzas to the config file. If using a bridge it's likely you want\nthe bridge to expose the addressing information for the host."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"auto br0\n\niface br0 inet static\n    bridge_ports bond0\n    bridge_stp off\n    bridge_maxwait 0\n    address 169.229.226.x\n    netmask 255.255.255.0\n    gateway 169.229.226.1\n\niface br0 inet6 static\n    address 2607:f140:8801::1:x\n    netmask 64\n    gateway 2607:f140:8801::1\n")),(0,i.kt)("h2",{id:"configuring-interfaces-by-hand"},"Configuring interfaces by hand"),(0,i.kt)("p",null,"Much configuration can be done by hand by using the ",(0,i.kt)("inlineCode",{parentName:"p"},"ip")," command. This is useful\nfor debugging and initial configuration but does not survive reboots."),(0,i.kt)("h3",{id:"create-a-bonding-interface"},"Create a bonding interface"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ ip link add bond0 type bond mode 4 miimon 100\n")),(0,i.kt)("h3",{id:"bind-physical-interfaces-to-the-bond-interface"},"Bind physical interfaces to the bond interface"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ ip link set <iface> master bond0\n")),(0,i.kt)("h3",{id:"show-bound-interfaces"},"Show bound interfaces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ ip link show type bond_slave\n")))}p.isMDXComponent=!0}}]);