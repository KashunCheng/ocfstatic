"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[5546],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>h});var a=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,a,o=function(e,t){if(null==e)return{};var r,a,o={},n=Object.keys(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=a.createContext({}),p=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var r=e.components,o=e.mdxType,n=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=p(r),h=o,f=c["".concat(l,".").concat(h)]||c[h]||m[h]||n;return r?a.createElement(f,s(s({ref:t},u),{},{components:r})):a.createElement(f,s({ref:t},u))}));function h(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var n=r.length,s=new Array(n);s[0]=c;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var p=2;p<n;p++)s[p]=r[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,r)}c.displayName="MDXCreateElement"},2642:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>n,metadata:()=>i,toc:()=>p});var a=r(7462),o=(r(7294),r(3905));const n={title:"Prometheus"},s=void 0,i={unversionedId:"staff/backend/prometheus",id:"staff/backend/prometheus",title:"Prometheus",description:"We use Prometheus to provide real-time monitoring of our hardware. The master is dementors which",source:"@site/docs/staff/backend/prometheus.md",sourceDirName:"staff/backend",slug:"/staff/backend/prometheus",permalink:"/docs/staff/backend/prometheus",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/staff/backend/prometheus.md",tags:[],version:"current",frontMatter:{title:"Prometheus"},sidebar:"tutorialSidebar",previous:{title:"Printhost",permalink:"/docs/staff/backend/printhost"},next:{title:"Puppet",permalink:"/docs/staff/backend/puppet"}},l={},p=[{value:"Alerts",id:"alerts",level:2},{value:"Metrics",id:"metrics",level:2},{value:"Custom Metrics",id:"custom-metrics",level:3},{value:"Custom Queries",id:"custom-queries",level:2},{value:"Grafana",id:"grafana",level:2}],u={toc:p};function m(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,a.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"We use Prometheus to provide real-time monitoring of our ",(0,o.kt)("a",{parentName:"p",href:"/docs/staff/backend"},"hardware"),". The master is ",(0,o.kt)("a",{parentName:"p",href:"/docs/staff/backend/servers"},"dementors")," which\nuses the Node Exporter to collect data from other servers."),(0,o.kt)("p",null,"We monitor servers, desktops, and staff VMs, but not the hozer boxes.\nAdditionally, we don't receive email alerts for staff VMs. Monitoring for the networking switch, blackhole, is currently under development."),(0,o.kt)("h2",{id:"alerts"},"Alerts"),(0,o.kt)("p",null,"Alerts can be viewed at ",(0,o.kt)("a",{parentName:"p",href:"https://prometheus.ocf.berkeley.edu/alerts"},"prometheus.ocf.berkeley.edu/alerts"),". They are configured at ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/ocf/puppet/tree/master/modules/ocf_prometheus/files/rules.d"},"this folder")," in the Puppet configs."),(0,o.kt)("p",null,"Alerts can additionally be configured using the ",(0,o.kt)("a",{parentName:"p",href:"prometheus.ocf.berkeley.edu/alertmanager"},"alert manager"),". Alertmanager handles notifications for alerts via communication through email and Slack. Alerts can be inhibited or silenced. Alertmanager documentation can be found ",(0,o.kt)("a",{parentName:"p",href:"https://prometheus.io/docs/alerting/alertmanager/"},"here"),"."),(0,o.kt)("p",null,"Alerts are currently under development and may not be fully comprehensive."),(0,o.kt)("h2",{id:"metrics"},"Metrics"),(0,o.kt)("p",null,"Prometheus uses ",(0,o.kt)("a",{parentName:"p",href:"https://prometheus.io/docs/concepts/metric_types/"},"metrics")," to collect and visualize different types of data."),(0,o.kt)("p",null,"The main way Prometheus collects metrics in the OCF is ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/prometheus/node_exporter"},"Node Exporter"),". Another important exporter we use is the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/prometheus/snmp_exporter"},"SNMP Exporter")," which monitors information from printers, and possibly in the future, network switches."),(0,o.kt)("p",null,"A full list of exporters is available in the ",(0,o.kt)("a",{parentName:"p",href:"https://prometheus.io/docs/instrumenting/exporters/"},"Prometheus documentation"),". In order to take advantage of these exporters, we define them in the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/ocf/puppet/blob/master/modules/ocf_prometheus/manifests/server.pp"},"Puppet config for the Prometheus server"),"."),(0,o.kt)("h3",{id:"custom-metrics"},"Custom Metrics"),(0,o.kt)("p",null,"There are three main ways to generate custom metrics:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"If metrics can be generated from a VM, run a script on a cronjob that writes to ",(0,o.kt)("inlineCode",{parentName:"li"},"/srv/prometheus"),". These automatically get bundled into Node Exporter. We do this for CUPS monitoring - ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/ocf/puppet/blob/master/modules/ocf_printhost/manifests/monitor.pp"},"here is an example of this in practice"),"."),(0,o.kt)("li",{parentName:"ol"},"Run a metrics server over HTTP and add them manually to the Puppet config. This is the most ideal method of using a prewritten exporter, like the Apache or Postfix exporters, both of which we use. An example of this is in the ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/ocf/puppet/blob/master/modules/ocf_prometheus/manifests/server.pp"},"Prometheus server config"),"."),(0,o.kt)("li",{parentName:"ol"},"Run your exporter in Kubernetes if it doesn't matter which host it runs on. This is how we run the SNMP exporter. Again, this is done in the ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/ocf/puppet/blob/master/modules/ocf_prometheus/manifests/server.pp"},"Prometheus server config"),".")),(0,o.kt)("h2",{id:"custom-queries"},"Custom Queries"),(0,o.kt)("p",null,"Prometheus supports querying a wide variety of metrics. (For a full list, go to ",(0,o.kt)("a",{parentName:"p",href:"https://prometheus.ocf.berkeley.edu"},"Prometheus"),' and use the "insert metric at cursor" dropdown.) A basic query comes in the form:'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'metric{label="value", label2="value2", ...}\n')),(0,o.kt)("p",null,"Some labels used frequently are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"instance:")," The name of the device that the data was collected from. Some examples are ",(0,o.kt)("inlineCode",{parentName:"li"},"papercut"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"avalanche"),", or ",(0,o.kt)("inlineCode",{parentName:"li"},"supernova"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"host_type:")," The type of device that is being queried. Valid types are ",(0,o.kt)("inlineCode",{parentName:"li"},"desktop"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"server"),", and ",(0,o.kt)("inlineCode",{parentName:"li"},"staffvm"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"job:")," The name of the job/exporter that collected the data. Some examples are ",(0,o.kt)("inlineCode",{parentName:"li"},"node"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"printer"),", and ",(0,o.kt)("inlineCode",{parentName:"li"},"slurm"),".")),(0,o.kt)("p",null,"For example, if you would like to view the total RAM installed on each of the ",(0,o.kt)("a",{parentName:"p",href:"/docs/staff/backend/servers"},"servers")," you can query ",(0,o.kt)("inlineCode",{parentName:"p"},'node_memory_Active_bytes{host_type="server"}'),"."),(0,o.kt)("p",null,"To view the per-second rate of a metric, use"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'rate(metric{label="value",...})\n')),(0,o.kt)("p",null,"For example, the data sent in bytes/second over the past 5 minutes by ",(0,o.kt)("inlineCode",{parentName:"p"},"fallingrocks")," can be retrieved using ",(0,o.kt)("inlineCode",{parentName:"p"},'rate(node_network_transmit_bytes_total{instance="fallingrocks"}'),"."),(0,o.kt)("p",null,"For more info about querying, see the ",(0,o.kt)("a",{parentName:"p",href:"https://prometheus.io/docs/prometheus/latest/querying/basics/"},"official documentation"),"."),(0,o.kt)("p",null,"Queries are best used in conjunction with Grafana, as to produce more readable results and save them for future reference. The next section will give more details on how to do this."),(0,o.kt)("h2",{id:"grafana"},"Grafana"),(0,o.kt)("p",null,"The frontend for Prometheus is ",(0,o.kt)("a",{parentName:"p",href:"https://grafana.ocf.berkeley.edu"},"Grafana"),", which displays statistics collected by Prometheus in a user-friendly manner. Some of the more useful dashboards available are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("a",{parentName:"strong",href:"https://ocf.io/serverstats"},"Servers"),":")," Displays usage information for the physical servers and hypervisors (fallingrocks, riptide, etc)."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("a",{parentName:"strong",href:"https://ocf.io/desktopstats"},"Desktops"),":")," Displays usage information for lab computers (cyclone, acid, etc)."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("a",{parentName:"strong",href:"https://ocf.io/printerstats"},"Printers"),":")," Displays printer usage and resource information."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("a",{parentName:"strong",href:"https://ocf.io/mirrorstats"},"Mirrors"),":")," Displays information about mirror staleness."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("a",{parentName:"strong",href:"hhttps://ocf.io/hpcstats"},"HPC"),":")," Displays usage information for the ",(0,o.kt)("a",{parentName:"li",href:"/docs/services/hpc"},"HPC cluster"),".")),(0,o.kt)("p",null,"There are more dashboards available, which can be accessed by clicking the dropdown arrow on the top left of the Grafana page."),(0,o.kt)("p",null,"Configuring Grafana dashboards does not require editing Puppet configs. Simply go to ",(0,o.kt)("a",{parentName:"p",href:"https://grafana.ocf.berkeley.edu"},"Grafana"),", login using your OCF account, and click the plus icon on the left toolbar to begin visually creating a custom dashboard. Grafana uses ",(0,o.kt)("a",{parentName:"p",href:"https://prometheus.io/docs/prometheus/latest/querying/basics/"},"Prometheus queries")," to fetch data to be displayed."))}m.isMDXComponent=!0}}]);