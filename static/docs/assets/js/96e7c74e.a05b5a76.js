"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[1425],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>h});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function p(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),s=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):p(p({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=s(r),h=a,m=d["".concat(l,".").concat(h)]||d[h]||c[h]||o;return r?n.createElement(m,p(p({ref:t},u),{},{components:r})):n.createElement(m,p({ref:t},u))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,p=new Array(o);p[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,p[1]=i;for(var s=2;s<o;s++)p[s]=r[s];return n.createElement.apply(null,p)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},3993:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>p,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var n=r(7462),a=(r(7294),r(3905));const o={title:"approve: record an OCF group account request"},p=void 0,i={unversionedId:"staff/scripts/approve",id:"staff/scripts/approve",title:"approve: record an OCF group account request",description:"This page explains the OCF account approval procedure and the usage of the",source:"@site/docs/staff/scripts/approve.md",sourceDirName:"staff/scripts",slug:"/staff/scripts/approve",permalink:"/docs/staff/scripts/approve",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/staff/scripts/approve.md",tags:[],version:"current",frontMatter:{title:"approve: record an OCF group account request"},sidebar:"tutorialSidebar",previous:{title:"Scripts",permalink:"/docs/staff/scripts/"},next:{title:"check: get details about an OCF user",permalink:"/docs/staff/scripts/check"}},l={},s=[{value:"When to use approve",id:"when-to-use-approve",level:2},{value:"Approving a request",id:"approving-a-request",level:2},{value:"Before approve",id:"before-approve",level:3},{value:"Running approve",id:"running-approve",level:3},{value:"Post approval",id:"post-approval",level:3}],u={toc:s};function c(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This page explains the OCF account approval procedure and the usage of the\n",(0,a.kt)("inlineCode",{parentName:"p"},"approve")," script."),(0,a.kt)("h2",{id:"when-to-use-approve"},"When to use approve"),(0,a.kt)("p",null,"OCF group accounts need to be manually approved by staff in the lab. All\nmembers requesting individual accounts should be directed to the online\napproval page. If a member requesting an individual account cannot use the\nonline approval system (likely because of an invalid/unacceptable CalNet UID),\ndirect them to an OCF officer."),(0,a.kt)("h2",{id:"approving-a-request"},"Approving a request"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"The approve program can only be run from supernova.")),(0,a.kt)("h3",{id:"before-approve"},"Before approve"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"SSH into supernova.ocf.berkeley.edu")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"For registered student groups, the OCF requires that a signatory authorize\nthe approval of the account. If the account is not a registered student\ngroup, check with the ",(0,a.kt)("a",{parentName:"p",href:"/docs/membership/eligibility"},"membership eligibility"),"\nto see what constitutes acceptable documentation.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"If the group is a registered student group, you can look up the requester's\nsignatory status by name with ",(0,a.kt)("a",{parentName:"p",href:"/docs/staff/scripts/signat"},"signat"),"."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"$ signat name matthew mcallister\nSearching for people... Found 1 entry.\nSearching for signatories...\n\nMATTHEW JAMES Mcallister (1031366)\n==================================\nGroup                    Accounts                       OID\n-----------------------  ---------------------------  -----\nOpen Computing Facility  decal, linux, ggroup, group  46187\n")),(0,a.kt)("p",{parentName:"li"},"Copy the group's OID, as you will need it when running approve.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"If the group is not a student group, the requester will need an official\nletterhead giving them authority to create the account. You will also need to\ncheck that the group doesn't already have an account using\n",(0,a.kt)("inlineCode",{parentName:"p"},"checkacct"),"."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"$ checkacct privacy\nLogin: bipla              Name: Berkeley Information Privacy Law Association\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Finally, check that the name on the requester's Cal ID matches who\nthey say they are."))),(0,a.kt)("h3",{id:"running-approve"},"Running approve"),(0,a.kt)("p",null,"When you run approve it will open a text editor; just fill out the form,\nsave it, and let the requester enter a password when prompted."),(0,a.kt)("p",null,"For reference, ",(0,a.kt)("inlineCode",{parentName:"p"},"user_name")," will be the username used to log in to the\nnewly-created account, ",(0,a.kt)("inlineCode",{parentName:"p"},"group_name")," is the full name of the group, e.g.\n'Open Computing Facility', and ",(0,a.kt)("inlineCode",{parentName:"p"},"email")," should ideally point somewhere that\nwill be read by whoever will be maintaining the account. ",(0,a.kt)("inlineCode",{parentName:"p"},"signatory")," has been\ndeprecated."),(0,a.kt)("p",null,"Optionally, if you pass the OID as the only argument, the ",(0,a.kt)("inlineCode",{parentName:"p"},"group_name"),",\n",(0,a.kt)("inlineCode",{parentName:"p"},"callink_oid"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"email")," fields will get filled in automatically using the\ngroup's public information on CalLink. If the group is not a student group,\n(e.g. a research group), use 0 as the OID."),(0,a.kt)("h3",{id:"post-approval"},"Post approval"),(0,a.kt)("p",null,"Explain to the requesters that they will need to apply for ",(0,a.kt)("a",{parentName:"p",href:"/docs/services/vhost"},"virtual hosting")," after they have set up their site if they wish to\ndo so. Point them to relevant wiki articles."))}c.isMDXComponent=!0}}]);