"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[6719],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),f=a,h=d["".concat(l,".").concat(f)]||d[f]||u[f]||i;return n?r.createElement(h,o(o({ref:t},p),{},{components:n})):r.createElement(h,o({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6094:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const i={title:"SSL certificates"},o=void 0,s={unversionedId:"staff/procedures/ssl",id:"staff/procedures/ssl",title:"SSL certificates",description:"We are able to obtain signed certificates at no charge through [Let's",source:"@site/docs/staff/procedures/ssl.md",sourceDirName:"staff/procedures",slug:"/staff/procedures/ssl",permalink:"/docs/staff/procedures/ssl",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/staff/procedures/ssl.md",tags:[],version:"current",frontMatter:{title:"SSL certificates"},sidebar:"tutorialSidebar",previous:{title:"SSHing into Supernova",permalink:"/docs/staff/procedures/ssh-supernova"},next:{title:"User disk quotas",permalink:"/docs/staff/procedures/user-quotas"}},l={},c=[{value:"Add relevant entries to LDAP/DNS",id:"add-relevant-entries-to-ldapdns",level:2},{value:"Setting up SSL with Puppet",id:"setting-up-ssl-with-puppet",level:2},{value:"Verifying certificates",id:"verifying-certificates",level:2}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"We are able to obtain signed certificates at no charge through ",(0,a.kt)("a",{parentName:"p",href:"https://letsencrypt.org/"},"Let's\nEncrypt"),"."),(0,a.kt)("p",null,"The primary Common Name for a certificate should always be the ",(0,a.kt)("strong",{parentName:"p"},"server\nhostname"),", with service CNAMEs specified as Subject Alternative Names. For\ninstance, a certificate for our apt repository/mirrors should have the primary\nCN ",(0,a.kt)("inlineCode",{parentName:"p"},"fallingrocks.ocf.berkeley.edu"),", with ",(0,a.kt)("inlineCode",{parentName:"p"},"apt.ocf.berkeley.edu")," and\n",(0,a.kt)("inlineCode",{parentName:"p"},"mirrors.ocf.berkeley.edu")," as SANs."),(0,a.kt)("p",null,"This allows us to easily distinguish between certificates in cases where a\nservice may be hosted by multiple hostnames, or where the hostname changes,\nwithout sharing private keys."),(0,a.kt)("h2",{id:"add-relevant-entries-to-ldapdns"},"Add relevant entries to LDAP/DNS"),(0,a.kt)("p",null,"The SSL support within Puppet relies on the ",(0,a.kt)("inlineCode",{parentName:"p"},"dnsA")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"dnsCname")," entries for a\nhost within LDAP. These are also converted in the ocf/dns repo into\nBIND-parsable files, so if you update LDAP and then update the ocf/dns repo,\nyou should be ready to go!"),(0,a.kt)("h2",{id:"setting-up-ssl-with-puppet"},"Setting up SSL with Puppet"),(0,a.kt)("p",null,"Add the ",(0,a.kt)("inlineCode",{parentName:"p"},"ocf::ssl::default")," module to the server (e.g. by adding it to the\nserver's per-host hiera config). This will run\n",(0,a.kt)("a",{parentName:"p",href:"https://dehydrated.io/"},(0,a.kt)("inlineCode",{parentName:"a"},"dehydrated"))," to update DNS dynamically (a dns-01\nchallenge) and spit out a valid cert. This will automatically retrieve a cert\nfor a host that matches as much as it can in terms of SANs. For instance, if\nrequesting for a host with a hostname of ",(0,a.kt)("inlineCode",{parentName:"p"},"foo")," with an alias of ",(0,a.kt)("inlineCode",{parentName:"p"},"bar"),", it will\nrequest ",(0,a.kt)("inlineCode",{parentName:"p"},"foo.ocf.berkeley.edu"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"bar.ocf.berkeley.edu"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"foo.ocf.io"),", and\n",(0,a.kt)("inlineCode",{parentName:"p"},"bar.ocf.io"),". If you need to customize this list, use the ",(0,a.kt)("inlineCode",{parentName:"p"},"ocf::ssl::bundle"),"\nclass and pass in a list of domains."),(0,a.kt)("p",null,"If puppet successfully runs, it should provide these files for whatever service you\nwant to setup that needs SSL:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"/etc/ssl/private/${fqdn}.key")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"/etc/ssl/private/${fqdn}.crt")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"/etc/ssl/private/${fqdn}.bundle"))),(0,a.kt)("p",null,"The bundle file is automatically generated from the certificate you provided,\nand contains the Let's Encrypt intermediate certificate."),(0,a.kt)("p",null,"You should also make sure to notify the service automatically so that when any\nnew certs come along they are automatically used by the service. This requires\nlinking the ",(0,a.kt)("inlineCode",{parentName:"p"},"ocf::ssl::default")," module with whatever service you're using the\ncert within. For instance, to restart nginx when certs are updated, add this\ninto your puppet manifest:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-puppet"},"Class['ocf::ssl::default'] ~> Class['Nginx::Service']\n")),(0,a.kt)("h2",{id:"verifying-certificates"},"Verifying certificates"),(0,a.kt)("p",null,"For the host ",(0,a.kt)("inlineCode",{parentName:"p"},"rt.ocf.berkeley.edu")," on port 443 (HTTPS), try connecting using\nthe OpenSSL client."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"openssl s_client -CApath /etc/ssl/certs -connect rt.ocf.berkeley.edu:443\n")),(0,a.kt)("p",null,"The last line of the SSL session information should have a zero return code.\nThis only verifies the certificate, not that the hostname you entered matches\nthe Common Name or Subject Alternatives Names on the certificate."),(0,a.kt)("p",null,"Good:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Verify return code: 0 (ok)\n")),(0,a.kt)("p",null,"Bad example 1:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Verify return code: 18 (self signed certificate)\n")),(0,a.kt)("p",null,"The default self-signed certificate, not the one obtained through Let's\nEncrypt, is probably still being used."),(0,a.kt)("p",null,"Bad example 2:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Verify return code: 21 (unable to verify the first certificate)\n")),(0,a.kt)("p",null,"The intermediate CA chain is probably missing (or in the wrong order), so there\nis no trust path to a root CA."))}u.isMDXComponent=!0}}]);