"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[5334],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>d});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),m=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=m(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=m(r),d=a,h=p["".concat(s,".").concat(d)]||p[d]||u[d]||o;return r?n.createElement(h,i(i({ref:t},c),{},{components:r})):n.createElement(h,i({ref:t},c))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var m=2;m<o;m++)i[m]=r[m];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},8492:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>m});var n=r(7462),a=(r(7294),r(3905));const o={title:"Git"},i=void 0,l={unversionedId:"staff/backend/git",id:"staff/backend/git",title:"Git",description:"Git is a distributed revision control system used by the OCF. Other version",source:"@site/docs/staff/backend/git.md",sourceDirName:"staff/backend",slug:"/staff/backend/git",permalink:"/docs/staff/backend/git",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/staff/backend/git.md",tags:[],version:"current",frontMatter:{title:"Git"},sidebar:"tutorialSidebar",previous:{title:"External firewall",permalink:"/docs/staff/backend/firewall"},next:{title:"Internal firewalls",permalink:"/docs/staff/backend/internal-firewalls"}},s={},m=[{value:"Workflow",id:"workflow",level:2},{value:"To &quot;update&quot;",id:"to-update",level:3},{value:"To &quot;upload&quot;",id:"to-upload",level:3},{value:"To &quot;import&quot;",id:"to-import",level:3},{value:"Other useful commands",id:"other-useful-commands",level:2},{value:"Terminology",id:"terminology",level:2},{value:"Recommended reading",id:"recommended-reading",level:2}],c={toc:m};function u(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Git is a distributed revision control system used by the OCF. Other version\ncontrol systems include Mercurial (also distributed) and Subversion (not\ndistributed)."),(0,a.kt)("h2",{id:"workflow"},"Workflow"),(0,a.kt)("p",null,'Although Git is a great tool for large-scale distributed development, for us a\nSubversion-like workflow with a "central repository" (where you clone/fetch\nfrom and push to) and linear history makes more sense. The instructions below\nassume that development is happening in a single branch.'),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Only commit your own, original work"),". You may commit another staff member's\nwork if you have permission and change the author appropriately (e.g.,\n",(0,a.kt)("inlineCode",{parentName:"p"},'--author="Guest User <guser@ocf.berkeley.edu>"'),"). When committing, ",(0,a.kt)("inlineCode",{parentName:"p"},"git config user.name")," should be your name and ",(0,a.kt)("inlineCode",{parentName:"p"},"git config user.email")," should be your OCF\nemail address -- this should be taken care of by ",(0,a.kt)("a",{parentName:"p",href:"/docs/staff/backend/ldap"},"LDAP")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"/etc/mailname")," on OCF machines."),(0,a.kt)("h3",{id:"to-update"},'To "update"'),(0,a.kt)("p",null,"Get the latest commits from the central repository and update your working\ntree."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"git pull --rebase\n")),(0,a.kt)("p",null,"This will ",(0,a.kt)("inlineCode",{parentName:"p"},"git fetch")," (update your local copy of the remote repository) and\n",(0,a.kt)("inlineCode",{parentName:"p"},"git rebase")," (rewrite current branch in terms of tracked branch). The rebase\nprevents unnecessary merge commits by moving your local commits on top of the\nlatest remote commit (",(0,a.kt)("inlineCode",{parentName:"p"},"FETCH_HEAD"),"). This is a good thing if you have any local\ncommits which have not yet been pushed to the remote repository."),(0,a.kt)("p",null,'If you have "dirty" uncommitted changes, you\'ll need to commit them or stash\nthem before rebasing (',(0,a.kt)("inlineCode",{parentName:"p"},"git stash"),")."),(0,a.kt)("h3",{id:"to-upload"},'To "upload"'),(0,a.kt)("p",null,"Make commits and push them to the central repository."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"git add FILES # add current state of FILES in working tree to index\ngit commit    # store index as a commit in current branch\n# repeat git add and git commit for more commits\ngit rebase -i # clean up the history (reword or squash commits)\ngit push      # push current branch to tracked branch in remote repository\n")),(0,a.kt)("p",null,"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"git add -p")," to inspect individual changes before adding each one to the\nindex, and ",(0,a.kt)("inlineCode",{parentName:"p"},"git commit -v")," to show a diff of your commit when you are prompted\nfor a commit message."),(0,a.kt)("p",null,'If commits have been made on the remote repository in the meantime, you\'ll need\nto "update" first (see above).'),(0,a.kt)("h3",{id:"to-import"},'To "import"'),(0,a.kt)("p",null,"Pull someone else's changes into the central repository, for example from a\nbranch in a staff member's repository (",(0,a.kt)("inlineCode",{parentName:"p"},"REMOTE"),")."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"git fetch REMOTE                             # update local copy of remote\ngit log --graph --decorate FETCH_HEAD ^HEAD^ # list remote commits on top of current branch\ngit diff FETCH_HEAD                          # compare current branch with remote branch\ngit merge --ff-only FETCH_HEAD               # merge in if can linearly fast-forward\n")),(0,a.kt)("p",null,'If you can\'t fast-forward merge, "update" the remote repository first (see\nabove).'),(0,a.kt)("p",null,"If you want a merge commit, you can ",(0,a.kt)("inlineCode",{parentName:"p"},"git merge --no-ff")," instead."),(0,a.kt)("h2",{id:"other-useful-commands"},"Other useful commands"),(0,a.kt)("p",null,"Current state of working tree:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"git status\n")),(0,a.kt)("p",null,"Throw away uncommitted changes:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"git checkout -- FILES  # in particular files\ngit reset --hard HEAD # in the entire working tree\n")),(0,a.kt)("p",null,"Revise the last commit:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"git commit --amend\n")),(0,a.kt)("p",null,"Undo the last commit:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"git reset HEAD^        # leaves changes in the working tree so they can be committed again\ngit reset --hard HEAD^ # throws away changes\n")),(0,a.kt)("p",null,"File operations:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"git mv\ngit rm\n")),(0,a.kt)("p",null,"Advanced:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"git filter-branch # rewrite history according to a filter\ngit blame         # show the commit which last modified each line of a file\ngit reflog        # useful for undoing git mistakes\n")),(0,a.kt)("h2",{id:"terminology"},"Terminology"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"branch",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"line of changes in a repository, default branch is ",(0,a.kt)("inlineCode",{parentName:"li"},"master")))),(0,a.kt)("li",{parentName:"ul"},"fast-forward",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"advance branch forward in a linear sequence"),(0,a.kt)("li",{parentName:"ul"},"this is usually what we want: the new commit builds directly on the\nprevious commit"))),(0,a.kt)("li",{parentName:"ul"},"hooks",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"optional scripts that can be executed during git operations"),(0,a.kt)("li",{parentName:"ul"},"for example, validate syntax before accepting a commit or deploy code to a\nserver"))),(0,a.kt)("li",{parentName:"ul"},"index (aka staging area)",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"files that are ready to be stored in your next commit"))),(0,a.kt)("li",{parentName:"ul"},"references (aka refs)",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"SHA-1 hashes that identify commits"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"HEAD")," points to the latest commit ref in the current branch (",(0,a.kt)("inlineCode",{parentName:"li"},"HEAD^")," to\nthe one before it)"))),(0,a.kt)("li",{parentName:"ul"},"remote",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"upstream repository that you can ",(0,a.kt)("inlineCode",{parentName:"li"},"git fetch")," from or ",(0,a.kt)("inlineCode",{parentName:"li"},"git push")," to, default\nis ",(0,a.kt)("inlineCode",{parentName:"li"},"origin")),(0,a.kt)("li",{parentName:"ul"},'local branches can "track" remote branches (e.g., ',(0,a.kt)("inlineCode",{parentName:"li"},"master")," tracking\n",(0,a.kt)("inlineCode",{parentName:"li"},"origin/master"),")"))),(0,a.kt)("li",{parentName:"ul"},"working tree (aka workspace or working directory)",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"directory that checked out files reside"),(0,a.kt)("li",{parentName:"ul"},'this includes the current branch and any "dirty" uncommitted changes\n(staged or not)')))),(0,a.kt)("h2",{id:"recommended-reading"},"Recommended reading"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://marklodato.github.io/visual-git-guide/"},"A Visual Git Reference")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"http://www.gitimmersion.com/"},"Git Immersion")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"http://darwinweb.net/articles/the-case-for-git-rebase"},"The Case for Git Rebase"))))}u.isMDXComponent=!0}}]);